╔═══════════════════════════════════════════════════════════════╗
║  🤖 НОВАЯ СИСТЕМА AI - КЛАССИЧЕСКИЙ LODE RUNNER 🤖          ║
╚═══════════════════════════════════════════════════════════════╝


⚡ ЧТО ИЗМЕНИЛОСЬ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ НОВЫЕ КОМПОНЕНТЫ:

1. GridPathfinder.cs
   • Сеточная система карты (tile-based)
   • BFS поиск пути (Breadth-First Search)
   • Кэширование типов клеток для оптимизации
   • Определение типов: Ground, Ladder, Rope, Empty, Obstacle

2. LodeRunnerEnemyAI.cs  
   • Классическая логика Lode Runner (1983)
   • Два режима: Простой AI и AI с поиском пути
   • Жадный алгоритм с приоритетами
   • Умное использование лестниц


═══════════════════════════════════════════════════════════════


🎮 ЛОГИКА РАБОТЫ AI:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПРОСТОЙ РЕЖИМ (useSimpleAI = true)                        │
│ Как в оригинальном Lode Runner                            │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ ПРИОРИТЕТ 1: Если враг на лестнице                        │
│   ├─→ Игрок выше?   → Лезть ВВЕРХ    ↑                   │
│   ├─→ Игрок ниже?   → Лезть ВНИЗ     ↓                   │
│   └─→ На той же высоте? → Идти ГОРИЗОНТАЛЬНО →           │
│                                                            │
│ ПРИОРИТЕТ 2: Если игрок выше/ниже (> 2 юнита)            │
│   ├─→ Искать ближайшую лестницу (радиус 5)               │
│   ├─→ Идти к лестнице →                                   │
│   └─→ Использовать лестницу ↑↓                           │
│                                                            │
│ ПРИОРИТЕТ 3: Если примерно на той же высоте               │
│   └─→ Идти горизонтально к игроку →                      │
│                                                            │
└────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────┐
│ УМНЫЙ РЕЖИМ (useSimpleAI = false)                         │
│ С поиском пути через BFS                                   │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ ШАГ 1: Построить путь от врага к игроку (BFS)            │
│   • Проверка всех доступных направлений                   │
│   • Учет типов клеток (Ground, Ladder, etc.)              │
│   • Стоимость движения (падение дороже)                   │
│                                                            │
│ ШАГ 2: Следовать по найденному пути                       │
│   • Двигаться к следующей точке пути                      │
│   • Обновление пути каждые 0.5 сек                        │
│                                                            │
│ FALLBACK: Если путь не найден                             │
│   └─→ Переключиться на простую логику                    │
│                                                            │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


📊 БЛОК-СХЕМА АЛГОРИТМА (ПРОСТОЙ РЕЖИМ):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

   START
     │
     ├─→ [Игрок в зоне обнаружения?] (≤ 15 юнитов)
     │      │
     │  ┌───┴───┐
     │  ДА     НЕТ
     │  │       │
     │  │       └→ Idle (стоять на месте)
     │  │
     │  ├─→ [Враг на лестнице?]
     │  │      │
     │  │  ┌───┴───┐
     │  │  ДА     НЕТ
     │  │  │       │
     │  │  │       ├─→ [|ΔY| > 2?] (игрок высоко/низко)
     │  │  │       │      │
     │  │  │       │  ┌───┴───┐
     │  │  │       │  ДА     НЕТ
     │  │  │       │  │       │
     │  │  │       │  │       └→ Идти ГОРИЗОНТАЛЬНО →
     │  │  │       │  │
     │  │  │       │  └→ [Лестница рядом?]
     │  │  │       │         │
     │  │  │       │     ┌───┴───┐
     │  │  │       │     ДА     НЕТ
     │  │  │       │     │       │
     │  │  │       │     │       └→ Идти ГОРИЗОНТАЛЬНО →
     │  │  │       │     │
     │  │  │       │     └→ ИДТИ К ЛЕСТНИЦЕ →
     │  │  │       │
     │  │  ├─→ [ΔY > 0?] (игрок выше)
     │  │  │      │
     │  │  │  ┌───┴───┐
     │  │  │  ДА     НЕТ
     │  │  │  │       │
     │  │  │  │   ┌───┴───┐
     │  │  │  │   │      [ΔY < 0?] (игрок ниже)
     │  │  │  │   │           │
     │  │  │  │   │       ┌───┴───┐
     │  │  │  │   │       ДА     НЕТ
     │  │  │  ↓   │       │       │
     │  │  ВВЕРХ  │    ВНИЗ  ГОРИЗОНТАЛЬНО
     │  │  ↑      │     ↓          →
     │  │         │
     │  └─────────┴─────→ ДВИЖЕНИЕ


═══════════════════════════════════════════════════════════════


🔧 НАСТРОЙКА:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ВАРИАНТ 1: Замена существующего врага                     │
├────────────────────────────────────────────────────────────┤
│ Если у вас уже есть враги с EnemyController:              │
│                                                            │
│ ШАГ 1: Выберите префаб Enemy                              │
│ ШАГ 2: Удалите компонент EnemyController                  │
│ ШАГ 3: Добавьте компонент LodeRunnerEnemyAI               │
│ ШАГ 4: Добавьте компонент GridPathfinder                  │
│ ШАГ 5: Настройте параметры (см. ниже)                     │
│ ШАГ 6: Сохраните префаб                                   │
└────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────┐
│ ВАРИАНТ 2: Создание нового врага                          │
├────────────────────────────────────────────────────────────┤
│ ШАГ 1: Создать пустой GameObject                          │
│ ШАГ 2: Добавить компоненты:                               │
│   • SpriteRenderer                                        │
│   • Rigidbody2D                                           │
│   • CapsuleCollider2D                                     │
│   • LodeRunnerEnemyAI                                     │
│   • GridPathfinder                                        │
│                                                            │
│ ШАГ 3: Создать дочерний объект GroundCheck                │
│   Position: (0, -0.6, 0)                                  │
│                                                            │
│ ШАГ 4: Настроить параметры                                │
│ ШАГ 5: Сохранить как префаб                               │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


⚙️ ПАРАМЕТРЫ LODERUNNERAI:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ [Скорость движения]                                        │
├────────────────────────────────────────────────────────────┤
│ Walk Speed ................. 3     (скорость ходьбы)      │
│ Climb Speed ................ 2     (скорость лазания)     │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ [AI настройки]                                             │
├────────────────────────────────────────────────────────────┤
│ Use Simple AI .............. ✓     (простой режим)        │
│ Detection Range ............ 15    (дальность)            │
│ Update Path Interval ....... 0.5   (обновление пути)      │
│ Alignment Threshold ........ 0.3   (порог выравнивания)   │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ [Проверка окружения]                                       │
├────────────────────────────────────────────────────────────┤
│ Ground Check ............... Transform (дочерний объект)  │
│ Ground Check Radius ........ 0.2   (радиус проверки)      │
│ Ground Layer ............... Ground + Diggable            │
│ Ladder Layer ............... Ladder                        │
│ Rope Layer ................. Rope                          │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ [Яма и возрождение]                                        │
├────────────────────────────────────────────────────────────┤
│ Stuck In Hole Time ......... 3     (время в яме, сек)     │
│ Respawn Delay .............. 2     (задержка возрождения) │
│ Respawn Point .............. Transform (точка возрождения)│
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


⚙️ ПАРАМЕТРЫ GRIDPATHFINDER:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ [Настройки сетки]                                          │
├────────────────────────────────────────────────────────────┤
│ Grid Step X ................ 0.5   (шаг сетки по X)       │
│ Grid Step Y ................ 1.0   (шаг сетки по Y)       │
│ Max Path Length ............ 50    (макс. длина пути)     │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ [Слои]                                                     │
├────────────────────────────────────────────────────────────┤
│ Ground Layer ............... Ground + Diggable            │
│ Ladder Layer ............... Ladder                        │
│ Rope Layer ................. Rope                          │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ [Визуализация]                                             │
├────────────────────────────────────────────────────────────┤
│ Draw Debug ................. ✓     (показывать путь)      │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


🎯 РЕЖИМЫ AI:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПРОСТОЙ РЕЖИМ (Use Simple AI = ✓)                         │
├────────────────────────────────────────────────────────────┤
│ ✅ Как в оригинальном Lode Runner (1983)                  │
│ ✅ Быстрый и предсказуемый                                 │
│ ✅ Жадный алгоритм (greedy)                                │
│ ✅ Приоритеты: лестница → вертикаль → горизонталь         │
│                                                            │
│ ПОДХОДИТ ДЛЯ:                                              │
│ • Ретро-стиля игры                                         │
│ • Простых уровней                                          │
│ • Низкой сложности                                         │
│                                                            │
│ ПОВЕДЕНИЕ:                                                 │
│ • Враг идет "напрямик" к игроку                           │
│ • Может застревать в лабиринтах                           │
│ • Предсказуемый (игрок может обмануть)                    │
└────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────┐
│ УМНЫЙ РЕЖИМ (Use Simple AI = ✗)                           │
├────────────────────────────────────────────────────────────┤
│ ✅ Поиск пути через BFS                                    │
│ ✅ Находит кратчайший путь                                 │
│ ✅ Обходит препятствия                                     │
│ ✅ Использует лестницы стратегически                       │
│                                                            │
│ ПОДХОДИТ ДЛЯ:                                              │
│ • Сложных уровней                                          │
│ • Лабиринтов                                               │
│ • Высокой сложности                                        │
│                                                            │
│ ПОВЕДЕНИЕ:                                                 │
│ • Враг ищет оптимальный путь                              │
│ • Обходит тупики                                           │
│ • Сложнее обмануть                                         │
│                                                            │
│ ПРОИЗВОДИТЕЛЬНОСТЬ:                                        │
│ • Немного медленнее                                        │
│ • Кэширование для оптимизации                             │
│ • Ограничение длины пути (50 шагов)                       │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


💡 ПРИМЕРЫ ПОВЕДЕНИЯ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔═══════════════════════════════════════════════════════════╗
║  ПРИМЕР 1: Игрок на верхнем этаже                        ║
╚═══════════════════════════════════════════════════════════╝

    👤 ← Игрок (Y = +5)
    ████████████
         ║║ ← Лестница
         ║║
    ████████████
         🤖 ← Враг (Y = 0)

ПРОСТОЙ РЕЖИМ:
  1. Враг видит игрока (в радиусе 15)
  2. Вычисляет ΔY = +5 (игрок выше на 5 юнитов)
  3. |ΔY| > 2 → Нужна лестница!
  4. Ищет лестницу в радиусе 5 юнитов
  5. Находит лестницу справа
  6. Идет к лестнице →
  7. Поднимается по лестнице ↑
  8. Достигает игрока!

УМНЫЙ РЕЖИМ:
  1. Враг запускает BFS поиск пути
  2. Строит путь: [0,0] → [2,0] → [2,1] → ... → [2,5]
  3. Следует по пути шаг за шагом
  4. Находит оптимальный маршрут


╔═══════════════════════════════════════════════════════════╗
║  ПРИМЕР 2: Лабиринт                                       ║
╚═══════════════════════════════════════════════════════════╝

    👤
    │
    ████  ████
         │
    🤖 ←─┘

ПРОСТОЙ РЕЖИМ:
  • Враг идет вправо к игроку
  • Упирается в стену
  • Застревает!
  • Стоит на месте

УМНЫЙ РЕЖИМ:
  • Враг строит путь через BFS
  • Находит обходной маршрут
  • Идет вокруг стены
  • Догоняет игрока!


╔═══════════════════════════════════════════════════════════╗
║  ПРИМЕР 3: Игрок на той же высоте                        ║
╚═══════════════════════════════════════════════════════════╝

    ████████████████████████
    🤖 ←─────────→ 👤

ПРОСТОЙ И УМНЫЙ РЕЖИМ:
  • ΔY ≈ 0 (примерно на одной высоте)
  • Враг идет горизонтально к игроку →
  • Догоняет!


═══════════════════════════════════════════════════════════════


🔗 ИНТЕГРАЦИЯ С ЯМАМИ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

В DiggableBlock.cs добавьте:

private void OnTriggerEnter2D(Collider2D collision)
{
    // Проверка EnemyController (старая система)
    EnemyController oldEnemy = collision.GetComponent<EnemyController>();
    if (oldEnemy != null && isDug && !oldEnemy.IsStuckInHole())
    {
        oldEnemy.StuckInHole();
    }
    
    // Проверка LodeRunnerEnemyAI (новая система)
    LodeRunnerEnemyAI newEnemy = collision.GetComponent<LodeRunnerEnemyAI>();
    if (newEnemy != null && isDug && !newEnemy.IsStuckInHole())
    {
        newEnemy.StuckInHole();
    }
}


═══════════════════════════════════════════════════════════════


⚖️ БАЛАНСИРОВКА СЛОЖНОСТИ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ЛЕГКИЙ РЕЖИМ:
  Use Simple AI = true
  Walk Speed = 2
  Detection Range = 10
  Stuck In Hole Time = 5

СРЕДНИЙ РЕЖИМ (рекомендуется):
  Use Simple AI = true
  Walk Speed = 3
  Detection Range = 15
  Stuck In Hole Time = 3

СЛОЖНЫЙ РЕЖИМ:
  Use Simple AI = false (умный AI)
  Walk Speed = 4
  Detection Range = 20
  Stuck In Hole Time = 2


═══════════════════════════════════════════════════════════════


🎨 ВИЗУАЛИЗАЦИЯ (GIZMOS):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Выделите врага в Hierarchy чтобы увидеть:

🔴 Красная сфера .......... Detection Range (зона обнаружения)
🟢 Зеленый круг ........... GroundCheck (на земле)
🟡 Желтая стрелка ......... Направление движения
🔵 Голубая линия .......... Линия к игроку
🔵 Голубой путь ........... Найденный путь (умный режим)

Надписи:
  "Walking" ................ Идет
  "Climbing" ............... Лезет по лестнице
  "Idle" ................... Стоит
  "Simple AI: true" ........ Режим AI


═══════════════════════════════════════════════════════════════


✅ ЧЕКЛИСТ МИГРАЦИИ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

☐ 1. Создать резервную копию проекта
☐ 2. Выбрать префаб Enemy
☐ 3. Удалить старый компонент EnemyController
☐ 4. Добавить LodeRunnerEnemyAI
☐ 5. Добавить GridPathfinder
☐ 6. Настроить параметры:
     ☐ Ground Check
     ☐ Слои (Ground, Ladder, Rope)
     ☐ Скорости (Walk Speed, Climb Speed)
     ☐ Use Simple AI (режим)
☐ 7. Обновить DiggableBlock.cs (интеграция с ямами)
☐ 8. Протестировать:
     ☐ Преследование игрока
     ☐ Использование лестниц
     ☐ Застревание в ямах
     ☐ Возрождение
☐ 9. Настроить сложность
☐ 10. Сохранить префаб


═══════════════════════════════════════════════════════════════


✨ ГОТОВО! НОВАЯ СИСТЕМА AI УСТАНОВЛЕНА! ✨

Теперь враги ведут себя как в классическом Lode Runner (1983)!

Особенности:
• ✅ Жадный алгоритм с приоритетами
• ✅ Активное использование лестниц
• ✅ Опциональный BFS поиск пути
• ✅ Сеточная система координат
• ✅ Классическое поведение

Удачи в создании уровней! 🚀

