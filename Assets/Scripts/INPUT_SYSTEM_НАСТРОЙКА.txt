═══════════════════════════════════════════════════════════════
  ⌨️ НАСТРОЙКА NEW INPUT SYSTEM ⌨️
  Руководство по интеграции с PlayerController
═══════════════════════════════════════════════════════════════

✅ ЧТО БЫЛО СДЕЛАНО:

1. ✓ Добавлены действия DigLeft и DigRight в InputSystem_Actions
2. ✓ Настроены биндинги:
   • Z - копать слева
   • X - копать справа
3. ✓ PlayerController обновлен для работы с новой Input System
4. ✓ Исправлена ошибка InvalidOperationException

═══════════════════════════════════════════════════════════════

🚀 БЫСТРАЯ НАСТРОЙКА (2 шага):

ШАГ 1: Назначить Input Actions в PlayerController
  1. Выберите объект Player в сцене
  2. В компоненте Player Controller найдите поле "Input Actions"
  3. Перетащите файл "InputSystem_Actions" из Assets/
  4. ✓ Готово!

ШАГ 2: Проверить управление
  1. Нажмите ▶ Play
  2. Протестируйте управление:
     • ← → ↑ ↓ или WASD - движение
     • Z - копать слева
     • X - копать справа
  3. ✓ Всё работает!

═══════════════════════════════════════════════════════════════

🎮 НАСТРОЕННЫЕ ДЕЙСТВИЯ:

┌──────────────────────────────────────────────────────────────┐
│ Action Map: Player                                            │
├──────────────────────────────────────────────────────────────┤
│                                                               │
│ 📍 Move (Vector2):                                            │
│    • WASD клавиши                                            │
│    • Стрелки ← ↑ ↓ →                                         │
│    • Геймпад левый стик                                      │
│                                                               │
│ 🔨 DigLeft (Button):                                          │
│    • Z клавиша                                               │
│    • Копает яму слева от персонажа                           │
│                                                               │
│ 🔨 DigRight (Button):                                         │
│    • X клавиша                                               │
│    • Копает яму справа от персонажа                          │
│                                                               │
└──────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════

⚙️ КАК ЭТО РАБОТАЕТ:

ИНИЦИАЛИЗАЦИЯ (Awake):
  • PlayerController находит InputActionAsset
  • Получает ссылки на действия Move, DigLeft, DigRight
  • Кэширует их для быстрого доступа

АКТИВАЦИЯ (OnEnable):
  • Input Actions автоматически включаются

ДЕАКТИВАЦИЯ (OnDisable):
  • Input Actions автоматически выключаются

ИСПОЛЬЗОВАНИЕ (Update):
  • moveAction.ReadValue<Vector2>() - получение движения
  • digLeftAction.WasPressedThisFrame() - проверка нажатия Z
  • digRightAction.WasPressedThisFrame() - проверка нажатия X

═══════════════════════════════════════════════════════════════

🔧 ИЗМЕНЕНИЕ КЛАВИШ УПРАВЛЕНИЯ:

ВАРИАНТ 1: Через Unity Editor
  1. Откройте файл InputSystem_Actions (двойной клик)
  2. Найдите Action "DigLeft" или "DigRight"
  3. В правой панели измените Binding
  4. Выберите новую клавишу
  5. Нажмите "Save Asset"

ВАРИАНТ 2: Через код
  В PlayerController можно добавить дополнительные проверки:

  ```csharp
  // В методе HandleDigging() добавить:
  if (Keyboard.current.leftShiftKey.isPressed && 
      Keyboard.current.leftArrowKey.wasPressedThisFrame)
  {
      // Альтернативное копание слева
  }
  ```

═══════════════════════════════════════════════════════════════

📋 СТРУКТУРА INPUT ACTIONS:

InputSystem_Actions.inputactions
├── Action Map: Player
│   ├── Move ................... Движение (Vector2)
│   ├── Look ................... Обзор (не используется)
│   ├── Attack ................. Атака (можно использовать)
│   ├── Jump ................... Прыжок (можно использовать)
│   ├── Sprint ................ Бег (можно использовать)
│   ├── DigLeft ............... Копать слева (добавлено)
│   └── DigRight .............. Копать справа (добавлено)
│
└── Action Map: UI
    └── (стандартные UI действия)

═══════════════════════════════════════════════════════════════

🎯 ДОБАВЛЕНИЕ НОВЫХ ДЕЙСТВИЙ:

ПРИМЕР: Добавить прыжок

1. В InputSystem_Actions уже есть действие "Jump"

2. В PlayerController добавить:
   ```csharp
   // В переменные:
   private InputAction jumpAction;
   
   // В Awake():
   jumpAction = playerMap.FindAction("Jump");
   
   // В Update() или FixedUpdate():
   if (jumpAction != null && jumpAction.WasPressedThisFrame())
   {
       if (isGrounded)
       {
           rb.linearVelocity = new Vector2(rb.linearVelocity.x, jumpForce);
       }
   }
   ```

3. Добавить параметр jumpForce в Inspector

═══════════════════════════════════════════════════════════════

🐛 РЕШЕНИЕ ПРОБЛЕМ:

ОШИБКА: "InputActionAsset не назначен"
РЕШЕНИЕ:
  1. Выберите Player в сцене
  2. В PlayerController → Input Actions
  3. Назначьте InputSystem_Actions
  4. ✓ Должно заработать

ОШИБКА: "Action Map 'Player' не найдена"
РЕШЕНИЕ:
  1. Откройте InputSystem_Actions
  2. Проверьте, что есть Action Map с именем "Player"
  3. Если нет - создайте или переименуйте существующую

ПРОБЛЕМА: Движение не работает
РЕШЕНИЕ:
  1. Проверьте, что Input Actions назначен
  2. Проверьте Console на ошибки
  3. Убедитесь, что Player включен (OnEnable вызван)
  4. В Edit → Project Settings → Player:
     → Active Input Handling должно быть "Input System Package"

ПРОБЛЕМА: Копание не работает
РЕШЕНИЕ:
  1. Проверьте, что персонаж на земле (isGrounded = true)
  2. Проверьте кулдаун (digCooldown)
  3. Проверьте, что рядом есть копаемые блоки
  4. Проверьте Console на сообщения от DigHole()

═══════════════════════════════════════════════════════════════

💡 ПРЕИМУЩЕСТВА NEW INPUT SYSTEM:

✅ КРОССПЛАТФОРМЕННОСТЬ:
   • Автоматическая поддержка клавиатуры, геймпада, тача
   • Не нужно писать отдельный код для каждого устройства

✅ ГИБКОСТЬ:
   • Легко изменять биндинги без изменения кода
   • Поддержка нескольких схем управления
   • Динамическое переключение между устройствами

✅ ПРОИЗВОДИТЕЛЬНОСТЬ:
   • Оптимизированная система событий
   • Меньше накладных расходов чем у старой Input

✅ УДОБСТВО:
   • Визуальный редактор в Unity
   • Автоматическая генерация C# классов (опционально)
   • Встроенная поддержка композитных действий

═══════════════════════════════════════════════════════════════

📊 СРАВНЕНИЕ СО СТАРОЙ СИСТЕМОЙ:

СТАРАЯ СИСТЕМА:
  ```csharp
  Input.GetAxisRaw("Horizontal");
  Input.GetKeyDown(KeyCode.Z);
  ```

  ❌ Жестко закодированные клавиши
  ❌ Сложно поддерживать разные устройства
  ❌ Нет визуального редактора

НОВАЯ СИСТЕМА:
  ```csharp
  moveAction.ReadValue<Vector2>();
  digLeftAction.WasPressedThisFrame();
  ```

  ✅ Гибкие биндинги
  ✅ Автоматическая поддержка всех устройств
  ✅ Визуальный редактор в Unity

═══════════════════════════════════════════════════════════════

🎓 ДОПОЛНИТЕЛЬНЫЕ РЕСУРСЫ:

UNITY ДОКУМЕНТАЦИЯ:
  • Input System Package Manual
  • https://docs.unity3d.com/Packages/com.unity.inputsystem@1.7

ОБУЧАЮЩИЕ ВИДЕО:
  • Unity Learn: New Input System
  • YouTube: Brackeys, Code Monkey

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:
  • Starter Assets (Unity Asset Store)
  • Input System Samples (Package Manager)

═══════════════════════════════════════════════════════════════

✅ ЧЕКЛИСТ НАСТРОЙКИ:

□ Input System Package установлен ✓
□ Active Input Handling = "Input System Package" ✓
□ InputSystem_Actions.inputactions создан ✓
□ Действия Move, DigLeft, DigRight настроены ✓
□ Биндинги клавиш назначены ✓
□ PlayerController обновлен ✓
□ Input Actions назначен в Inspector □ ← СДЕЛАЙТЕ ЭТО!
□ Протестировано управление □

═══════════════════════════════════════════════════════════════

🎉 ГОТОВО!

После назначения Input Actions в Inspector всё должно работать!

Если возникнут проблемы - проверьте раздел "Решение проблем" выше.

═══════════════════════════════════════════════════════════════

Версия: 1.0
Дата: 2025
Проект: RunOrDie

