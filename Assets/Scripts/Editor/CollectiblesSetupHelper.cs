using UnityEngine;
using UnityEditor;

/// <summary>
/// Helper –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∑–æ–ª–æ—Ç–æ, –∫–ª—é—á–∏)
/// </summary>
public class CollectiblesSetupHelper : EditorWindow
{
    [MenuItem("Lode Runner/–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")]
    public static void ShowWindow()
    {
        CollectiblesSetupHelper window = GetWindow<CollectiblesSetupHelper>("Collectibles Setup");
        window.minSize = new Vector2(450, 600);
        window.Show();
    }

    private void OnGUI()
    {
        GUILayout.Label("üèÜ –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´ –°–ë–û–†–ê –ü–†–ï–î–ú–ï–¢–û–í", EditorStyles.boldLabel);
        GUILayout.Space(10);
        
        // –®–∞–≥ 1: GameManager
        DrawSectionHeader("–®–∞–≥ 1: GameManager");
        
        GameManager gameManager = FindFirstObjectByType<GameManager>();
        
        if (gameManager == null)
        {
            EditorGUILayout.HelpBox("‚ùå GameManager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!", MessageType.Error);
            
            if (GUILayout.Button("‚ûï –°–æ–∑–¥–∞—Ç—å GameManager", GUILayout.Height(30)))
            {
                CreateGameManager();
            }
        }
        else
        {
            EditorGUILayout.HelpBox("‚úÖ GameManager –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ", MessageType.Info);
            
            if (GUILayout.Button("üîç –í—ã–¥–µ–ª–∏—Ç—å GameManager", GUILayout.Height(25)))
            {
                Selection.activeGameObject = gameManager.gameObject;
                EditorGUIUtility.PingObject(gameManager.gameObject);
            }
        }
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–µ–≤
        DrawSectionHeader("–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–µ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)");
        
        EditorGUILayout.HelpBox("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ–∏:\n" +
                                "‚Ä¢ Collectible (Layer 9) - –¥–ª—è –∑–æ–ª–æ—Ç–∞ –∏ –∫–ª—é—á–µ–π\n" +
                                "‚Ä¢ Exit (Layer 10) - –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —É—Ä–æ–≤–Ω—è", MessageType.None);
        
        GUILayout.Label("–°–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é: Edit ‚Üí Project Settings ‚Üí Tags and Layers", EditorStyles.wordWrappedMiniLabel);
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–æ–≤
        DrawSectionHeader("–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–æ–≤");
        
        if (GUILayout.Button("ü™ô –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± Gold (–ó–æ–ª–æ—Ç–æ)", GUILayout.Height(30)))
        {
            CreateGoldPrefab();
        }
        
        GUILayout.Space(5);
        
        if (GUILayout.Button("üîë –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± Key (–ö–ª—é—á)", GUILayout.Height(30)))
        {
            CreateKeyPrefab();
        }
        
        GUILayout.Space(5);
        
        if (GUILayout.Button("üö™ –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Ñ–∞–± Exit (–í—ã—Ö–æ–¥)", GUILayout.Height(30)))
        {
            CreateExitPrefab();
        }
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 4: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        DrawSectionHeader("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        
        GUILayout.Label("1. –°–æ–∑–¥–∞–π—Ç–µ GameManager (–µ—Å–ª–∏ –Ω–µ—Ç)", EditorStyles.wordWrappedLabel);
        GUILayout.Label("2. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Gold –ø—Ä–µ—Ñ–∞–±—ã –≤ —É—Ä–æ–≤–µ–Ω—å", EditorStyles.wordWrappedLabel);
        GUILayout.Label("3. –î–æ–±–∞–≤—å—Ç–µ Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, 1 –Ω–∞ —É—Ä–æ–≤–µ–Ω—å)", EditorStyles.wordWrappedLabel);
        GUILayout.Label("4. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ Exit —Ç–∞–º, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Ö–æ–¥", EditorStyles.wordWrappedLabel);
        GUILayout.Label("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã!", EditorStyles.wordWrappedLabel);
        
        GUILayout.Space(10);
        
        DrawSectionHeader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GameManager");
        
        GUILayout.Label("‚Ä¢ Require All Gold - –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å –í–°–Å –∑–æ–ª–æ—Ç–æ", EditorStyles.wordWrappedLabel);
        GUILayout.Label("‚Ä¢ Require Key - –Ω—É–∂–µ–Ω –ª–∏ –∫–ª—é—á –¥–ª—è –≤—ã—Ö–æ–¥–∞", EditorStyles.wordWrappedLabel);
        
        GUILayout.Space(10);
        
        DrawSectionHeader("üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è");
        
        GUILayout.Label("Gizmos –≤ Scene View:", EditorStyles.boldLabel);
        GUILayout.Label("üü° –ñ–µ–ª—Ç—ã–π –∫—Ä—É–≥ - –ó–æ–ª–æ—Ç–æ", EditorStyles.wordWrappedLabel);
        GUILayout.Label("üîµ –ì–æ–ª—É–±–æ–π –∫—Ä—É–≥ - –ö–ª—é—á", EditorStyles.wordWrappedLabel);
        GUILayout.Label("üü¢ –ó–µ–ª–µ–Ω—ã–π –∫—É–± - –í—ã—Ö–æ–¥", EditorStyles.wordWrappedLabel);
        
        GUILayout.Space(10);
        
        EditorGUILayout.HelpBox("üí° –°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Ñ–∞–±–æ–≤ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —Å–ø—Ä–∞–π—Ç—ã –≤ Inspector", MessageType.Info);
    }

    private void DrawSectionHeader(string title)
    {
        GUILayout.Space(5);
        EditorGUILayout.LabelField(title, EditorStyles.boldLabel);
        EditorGUILayout.LabelField("", GUI.skin.horizontalSlider);
        GUILayout.Space(5);
    }

    private void CreateGameManager()
    {
        // –°–æ–∑–¥–∞–µ–º GameObject
        GameObject gmObject = new GameObject("GameManager");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        GameManager gm = gmObject.AddComponent<GameManager>();
        
        // –í—ã–¥–µ–ª—è–µ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        Selection.activeGameObject = gmObject;
        EditorGUIUtility.PingObject(gmObject);
        
        EditorUtility.DisplayDialog("–ì–æ—Ç–æ–≤–æ!", "GameManager —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É!", "OK");
    }

    private void CreateGoldPrefab()
    {
        CreateCollectiblePrefab("Gold", Collectible.CollectibleType.Gold, 100);
    }

    private void CreateKeyPrefab()
    {
        CreateCollectiblePrefab("Key", Collectible.CollectibleType.Key, 0);
    }

    private void CreateCollectiblePrefab(string name, Collectible.CollectibleType type, int scoreValue)
    {
        // –°–æ–∑–¥–∞–µ–º GameObject
        GameObject prefabObject = new GameObject(name);
        
        // –î–æ–±–∞–≤–ª—è–µ–º SpriteRenderer
        SpriteRenderer sr = prefabObject.AddComponent<SpriteRenderer>();
        sr.sprite = AssetDatabase.GetBuiltinExtraResource<Sprite>("UI/Skin/Knob.psd");
        sr.color = type == Collectible.CollectibleType.Gold ? Color.yellow : Color.cyan;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä
        CircleCollider2D collider = prefabObject.AddComponent<CircleCollider2D>();
        collider.isTrigger = true;
        collider.radius = 0.3f;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Collectible
        Collectible collectible = prefabObject.AddComponent<Collectible>();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ SerializedObject
        SerializedObject so = new SerializedObject(collectible);
        so.FindProperty("type").enumValueIndex = (int)type;
        so.FindProperty("scoreValue").intValue = scoreValue;
        so.FindProperty("enablePulseAnimation").boolValue = true;
        so.FindProperty("pulseSpeed").floatValue = 2f;
        so.FindProperty("pulseScale").floatValue = 1.2f;
        so.ApplyModifiedProperties();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ—Ñ–∞–±–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç
        string folderPath = "Assets/GamePrefabs/Collectibles";
        if (!AssetDatabase.IsValidFolder(folderPath))
        {
            AssetDatabase.CreateFolder("Assets/GamePrefabs", "Collectibles");
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–µ—Ñ–∞–±
        string prefabPath = $"{folderPath}/{name}.prefab";
        GameObject prefab = PrefabUtility.SaveAsPrefabAsset(prefabObject, prefabPath);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ü–µ–Ω—ã
        DestroyImmediate(prefabObject);
        
        // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± –≤ Project
        Selection.activeObject = prefab;
        EditorGUIUtility.PingObject(prefab);
        
        EditorUtility.DisplayDialog("–ì–æ—Ç–æ–≤–æ!", 
            $"–ü—Ä–µ—Ñ–∞–± {name} —Å–æ–∑–¥–∞–Ω!\n" +
            $"–ü—É—Ç—å: {prefabPath}\n\n" +
            $"–ó–∞–º–µ–Ω–∏—Ç–µ —Å–ø—Ä–∞–π—Ç –Ω–∞ —Å–≤–æ–π –≤ Inspector.", "OK");
    }

    private void CreateExitPrefab()
    {
        // –°–æ–∑–¥–∞–µ–º GameObject
        GameObject exitObject = new GameObject("LevelExit");
        
        // –î–æ–±–∞–≤–ª—è–µ–º SpriteRenderer
        SpriteRenderer sr = exitObject.AddComponent<SpriteRenderer>();
        sr.sprite = AssetDatabase.GetBuiltinExtraResource<Sprite>("UI/Skin/Background.psd");
        sr.color = Color.green;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä
        BoxCollider2D collider = exitObject.AddComponent<BoxCollider2D>();
        collider.isTrigger = true;
        collider.size = new Vector2(1f, 1f);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç LevelExit
        LevelExit exit = exitObject.AddComponent<LevelExit>();
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–µ—Ñ–∞–±–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç
        string folderPath = "Assets/GamePrefabs";
        if (!AssetDatabase.IsValidFolder(folderPath))
        {
            AssetDatabase.CreateFolder("Assets", "GamePrefabs");
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–µ—Ñ–∞–±
        string prefabPath = $"{folderPath}/LevelExit.prefab";
        GameObject prefab = PrefabUtility.SaveAsPrefabAsset(exitObject, prefabPath);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ü–µ–Ω—ã
        DestroyImmediate(exitObject);
        
        // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± –≤ Project
        Selection.activeObject = prefab;
        EditorGUIUtility.PingObject(prefab);
        
        EditorUtility.DisplayDialog("–ì–æ—Ç–æ–≤–æ!", 
            $"–ü—Ä–µ—Ñ–∞–± LevelExit —Å–æ–∑–¥–∞–Ω!\n" +
            $"–ü—É—Ç—å: {prefabPath}\n\n" +
            $"–ó–∞–º–µ–Ω–∏—Ç–µ —Å–ø—Ä–∞–π—Ç –Ω–∞ —Å–≤–æ–π –≤ Inspector.", "OK");
    }
}

