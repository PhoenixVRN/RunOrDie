using UnityEngine;
using UnityEditor;

/// <summary>
/// Helper –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–µ–≤–æ–∫ –≤ –∏–≥—Ä–µ Lode Runner
/// </summary>
public class RopeSetupHelper : EditorWindow
{
    private const string ROPE_LAYER_NAME = "Rope";
    private int ropeLayerIndex = 8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ª–æ–π 8
    
    [MenuItem("Lode Runner/–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–µ–≤–æ–∫ (Rope Setup)")]
    public static void ShowWindow()
    {
        RopeSetupHelper window = GetWindow<RopeSetupHelper>("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä–µ–≤–æ–∫");
        window.minSize = new Vector2(400, 500);
        window.Show();
    }

    private void OnGUI()
    {
        GUILayout.Label("üéÆ –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–†–ï–í–û–ö (ROPE LAYER)", EditorStyles.boldLabel);
        GUILayout.Space(10);
        
        // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è
        DrawSectionHeader("–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è Rope");
        GUILayout.Label("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—è Rope:", EditorStyles.label);
        
        int currentRopeLayer = LayerMask.NameToLayer(ROPE_LAYER_NAME);
        if (currentRopeLayer == -1)
        {
            EditorGUILayout.HelpBox($"‚ùå –°–ª–æ–π '{ROPE_LAYER_NAME}' –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!", MessageType.Error);
            GUILayout.Label($"–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–π –≤—Ä—É—á–Ω—É—é: Edit ‚Üí Project Settings ‚Üí Tags and Layers ‚Üí Layer {ropeLayerIndex}", EditorStyles.wordWrappedMiniLabel);
            ropeLayerIndex = EditorGUILayout.IntSlider("–ù–æ–º–µ—Ä —Å–ª–æ—è:", ropeLayerIndex, 8, 31);
        }
        else
        {
            EditorGUILayout.HelpBox($"‚úÖ –°–ª–æ–π '{ROPE_LAYER_NAME}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (Layer {currentRopeLayer})", MessageType.Info);
            ropeLayerIndex = currentRopeLayer;
        }
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ñ–∞–±–æ–≤
        DrawSectionHeader("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ñ–∞–±–æ–≤ –≤–µ—Ä–µ–≤–æ–∫");
        
        if (GUILayout.Button("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã Rope", GUILayout.Height(30)))
        {
            SetupAllRopePrefabs();
        }
        
        GUILayout.Space(5);
        EditorGUILayout.HelpBox("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ—Ç –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã –≤ Assets/GamePrefabs/Rope/ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç –∏—Ö:\n" +
                                "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–ª–æ–π Rope\n" +
                                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç BoxCollider2D\n" +
                                "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã", MessageType.None);
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PlayerController
        DrawSectionHeader("–®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PlayerController");
        
        if (GUILayout.Button("üéØ –ù–∞–π—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Player –≤ —Å—Ü–µ–Ω–µ", GUILayout.Height(30)))
        {
            SetupPlayerRopeLayer();
        }
        
        GUILayout.Space(5);
        EditorGUILayout.HelpBox("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ—Ç PlayerController –≤ —Å—Ü–µ–Ω–µ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç:\n" +
                                "‚Ä¢ Rope Layer –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ\n" +
                                "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–µ—Ä–µ–≤–∫–µ", MessageType.None);
        
        GUILayout.Space(10);
        
        // –®–∞–≥ 4: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        DrawSectionHeader("üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –≤–µ—Ä–µ–≤–æ–∫");
        
        GUILayout.Label("1Ô∏è‚É£ –í –≤–æ–∑–¥—É—Ö–µ: –ò–≥—Ä–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ü–µ–ø–∏—Ç—Å—è –∑–∞ –≤–µ—Ä–µ–≤–∫—É", EditorStyles.wordWrappedLabel);
        GUILayout.Label("2Ô∏è‚É£ –ù–∞ –∑–µ–º–ª–µ: –ù–∞–∂–º–∏—Ç–µ ‚Üë –ø–æ–¥ –≤–µ—Ä–µ–≤–∫–æ–π, —á—Ç–æ–±—ã –ø–æ–¥–ø—Ä—ã–≥–Ω—É—Ç—å –∏ —Å—Ö–≤–∞—Ç–∏—Ç—å—Å—è", EditorStyles.wordWrappedLabel);
        GUILayout.Label("3Ô∏è‚É£ –ù–∞ –≤–µ—Ä–µ–≤–∫–µ: ‚Üê ‚Üí –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–µ—Ä–µ–≤–∫–µ", EditorStyles.wordWrappedLabel);
        GUILayout.Label("4Ô∏è‚É£ –°–ø—Ä—ã–≥–Ω—É—Ç—å: –ù–∞–∂–º–∏—Ç–µ ‚Üì —á—Ç–æ–±—ã –æ—Ç–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä–µ–≤–∫—É", EditorStyles.wordWrappedLabel);
        
        GUILayout.Space(10);
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PlayerController
        DrawSectionHeader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ PlayerController");
        GUILayout.Label("‚Ä¢ Rope Speed: –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≤–µ—Ä–µ–≤–∫–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4)", EditorStyles.wordWrappedLabel);
        GUILayout.Label("‚Ä¢ Center On Rope: –ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ –≤–µ—Ä–µ–≤–∫–∏ (–≤–∫–ª.)", EditorStyles.wordWrappedLabel);
        GUILayout.Label("‚Ä¢ Rope Center Speed: –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 8)", EditorStyles.wordWrappedLabel);
        GUILayout.Label("‚Ä¢ Can Climb Rope: –ú–æ–∂–Ω–æ –ª–∏ –ª–∞–∑–∞—Ç—å –≤–≤–µ—Ä—Ö –ø–æ –≤–µ—Ä–µ–≤–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", EditorStyles.wordWrappedLabel);
        
        GUILayout.Space(10);
        
        EditorGUILayout.HelpBox("üí° –°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ PlayerController ‚Üí Rope Layer –≤—ã–±—Ä–∞–Ω —Å–ª–æ–π 'Rope'", MessageType.Info);
    }

    private void DrawSectionHeader(string title)
    {
        GUILayout.Space(5);
        EditorGUILayout.LabelField(title, EditorStyles.boldLabel);
        EditorGUILayout.LabelField("", GUI.skin.horizontalSlider);
        GUILayout.Space(5);
    }

    private void SetupAllRopePrefabs()
    {
        string[] guids = AssetDatabase.FindAssets("t:Prefab", new[] { "Assets/GamePrefabs/Rope" });
        
        if (guids.Length == 0)
        {
            EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ—Ñ–∞–±–æ–≤ –≤ Assets/GamePrefabs/Rope/", "OK");
            return;
        }

        int ropeLayer = LayerMask.NameToLayer(ROPE_LAYER_NAME);
        if (ropeLayer == -1)
        {
            EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", $"–°–ª–æ–π '{ROPE_LAYER_NAME}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Project Settings ‚Üí Tags and Layers", "OK");
            return;
        }

        int processedCount = 0;
        
        foreach (string guid in guids)
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);
            GameObject prefab = AssetDatabase.LoadAssetAtPath<GameObject>(path);
            
            if (prefab != null)
            {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                string prefabPath = AssetDatabase.GetAssetPath(prefab);
                GameObject prefabContents = PrefabUtility.LoadPrefabContents(prefabPath);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–π
                SetLayerRecursively(prefabContents, ropeLayer);
                
                // –î–æ–±–∞–≤–ª—è–µ–º/–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º BoxCollider2D
                BoxCollider2D collider = prefabContents.GetComponent<BoxCollider2D>();
                if (collider == null)
                {
                    collider = prefabContents.AddComponent<BoxCollider2D>();
                }
                
                collider.isTrigger = true; // –í–µ—Ä–µ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞ (–ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ —Å–ø—Ä–∞–π—Ç)
                SpriteRenderer sr = prefabContents.GetComponentInChildren<SpriteRenderer>();
                if (sr != null && sr.sprite != null)
                {
                    // –î–µ–ª–∞–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä —á—É—Ç—å –±–æ–ª—å—à–µ —Å–ø—Ä–∞–π—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    Bounds spriteBounds = sr.sprite.bounds;
                    collider.size = new Vector2(spriteBounds.size.x * 1.2f, spriteBounds.size.y * 0.5f);
                    collider.offset = new Vector2(0, 0);
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                PrefabUtility.SaveAsPrefabAsset(prefabContents, prefabPath);
                PrefabUtility.UnloadPrefabContents(prefabContents);
                
                processedCount++;
            }
        }
        
        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
        
        EditorUtility.DisplayDialog("–ì–æ—Ç–æ–≤–æ!", 
            $"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–µ—Ñ–∞–±–æ–≤: {processedCount}\n\n" +
            $"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ª–æ–π: {ROPE_LAYER_NAME} (Layer {ropeLayer})\n" +
            $"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã BoxCollider2D (trigger)\n" +
            $"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤", "OK");
    }

    private void SetLayerRecursively(GameObject obj, int layer)
    {
        obj.layer = layer;
        foreach (Transform child in obj.transform)
        {
            SetLayerRecursively(child.gameObject, layer);
        }
    }

    private void SetupPlayerRopeLayer()
    {
        PlayerController player = FindFirstObjectByType<PlayerController>();
        
        if (player == null)
        {
            EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", "PlayerController –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!", "OK");
            return;
        }

        int ropeLayer = LayerMask.NameToLayer(ROPE_LAYER_NAME);
        if (ropeLayer == -1)
        {
            EditorUtility.DisplayDialog("–û—à–∏–±–∫–∞", $"–°–ª–æ–π '{ROPE_LAYER_NAME}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", "OK");
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º SerializedObject –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –ø–æ–ª—è–º
        SerializedObject serializedPlayer = new SerializedObject(player);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ropeLayer
        SerializedProperty ropeLayerProp = serializedPlayer.FindProperty("ropeLayer");
        if (ropeLayerProp != null)
        {
            ropeLayerProp.intValue = 1 << ropeLayer; // LayerMask = –±–∏—Ç–æ–≤–∞—è –º–∞—Å–∫–∞
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        SerializedProperty ropeSpeedProp = serializedPlayer.FindProperty("ropeSpeed");
        if (ropeSpeedProp != null && ropeSpeedProp.floatValue == 0f)
        {
            ropeSpeedProp.floatValue = 4f;
        }
        
        SerializedProperty centerOnRopeProp = serializedPlayer.FindProperty("centerOnRope");
        if (centerOnRopeProp != null)
        {
            centerOnRopeProp.boolValue = true;
        }
        
        SerializedProperty ropeCenterSpeedProp = serializedPlayer.FindProperty("ropeCenterSpeed");
        if (ropeCenterSpeedProp != null && ropeCenterSpeedProp.floatValue == 0f)
        {
            ropeCenterSpeedProp.floatValue = 8f;
        }
        
        serializedPlayer.ApplyModifiedProperties();
        
        // –í—ã–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        Selection.activeGameObject = player.gameObject;
        EditorGUIUtility.PingObject(player.gameObject);
        
        EditorUtility.DisplayDialog("–ì–æ—Ç–æ–≤–æ!", 
            $"PlayerController –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n" +
            $"‚Ä¢ Rope Layer: {ROPE_LAYER_NAME}\n" +
            $"‚Ä¢ Rope Speed: {ropeSpeedProp.floatValue}\n" +
            $"‚Ä¢ Center On Rope: {centerOnRopeProp.boolValue}\n" +
            $"‚Ä¢ Rope Center Speed: {ropeCenterSpeedProp.floatValue}\n\n" +
            $"–û–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω –≤ Hierarchy –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", "OK");
    }
}

