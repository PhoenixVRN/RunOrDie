using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

/// <summary>
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Lode Runner —Å–∏—Å—Ç–µ–º—ã
/// –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ª–æ–∏, —Ç–µ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∑–∏–∫–∏
/// </summary>
public class LodeRunnerProjectSetup : EditorWindow
{
    private Vector2 scrollPosition;
    private bool setupComplete = false;
    private List<string> setupLog = new List<string>();

    [MenuItem("Tools/Lode Runner/–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")]
    public static void ShowWindow()
    {
        var window = GetWindow<LodeRunnerProjectSetup>("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Lode Runner");
        window.minSize = new Vector2(400, 500);
        window.Show();
    }

    private void OnGUI()
    {
        EditorGUILayout.LabelField("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Lode Runner", EditorStyles.boldLabel);
        EditorGUILayout.Space(10);

        EditorGUILayout.HelpBox(
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç:\n" +
            "‚Ä¢ –°–ª–æ–∏ (Layers): Ground, Ladder, Rope, Diggable\n" +
            "‚Ä¢ –¢–µ–≥–∏ (Tags): Player, Ladder, Rope, Diggable\n" +
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É —Å–ª–æ—è–º–∏",
            MessageType.Info
        );

        EditorGUILayout.Space(10);

        GUI.backgroundColor = Color.green;
        if (GUILayout.Button("üöÄ –í–´–ü–û–õ–ù–ò–¢–¨ –ù–ê–°–¢–†–û–ô–ö–£", GUILayout.Height(40)))
        {
            SetupProject();
        }
        GUI.backgroundColor = Color.white;

        EditorGUILayout.Space(10);

        if (setupComplete)
        {
            GUI.backgroundColor = Color.cyan;
            if (GUILayout.Button("–û—Ç–∫—Ä—ã—Ç—å Tags & Layers", GUILayout.Height(30)))
            {
                SettingsService.OpenProjectSettings("Project/Tags and Layers");
            }

            if (GUILayout.Button("–û—Ç–∫—Ä—ã—Ç—å Physics 2D Settings", GUILayout.Height(30)))
            {
                SettingsService.OpenProjectSettings("Project/Physics 2D");
            }
            GUI.backgroundColor = Color.white;
        }

        EditorGUILayout.Space(10);
        EditorGUILayout.LabelField("–õ–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", EditorStyles.boldLabel);

        scrollPosition = EditorGUILayout.BeginScrollView(scrollPosition, GUILayout.Height(250));
        foreach (string log in setupLog)
        {
            if (log.StartsWith("‚úì"))
            {
                GUI.color = Color.green;
            }
            else if (log.StartsWith("‚ö†"))
            {
                GUI.color = Color.yellow;
            }
            else if (log.StartsWith("‚ùå"))
            {
                GUI.color = Color.red;
            }
            else
            {
                GUI.color = Color.white;
            }

            EditorGUILayout.LabelField(log, EditorStyles.wordWrappedLabel);
            GUI.color = Color.white;
        }
        EditorGUILayout.EndScrollView();
    }

    private void SetupProject()
    {
        setupLog.Clear();
        setupLog.Add("=== –ù–ê–ß–ê–õ–û –ù–ê–°–¢–†–û–ô–ö–ò ===");

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–µ–≤
        SetupLayers();

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤
        SetupTags();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π
        SetupCollisionMatrix();

        setupLog.Add("=== –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
        setupComplete = true;

        Debug.Log("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Lode Runner –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    }

    private void SetupLayers()
    {
        setupLog.Add("\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–µ–≤ ---");

        string[] layersToAdd = { "Ground", "Ladder", "Rope", "Diggable" };

        foreach (string layerName in layersToAdd)
        {
            if (CreateLayer(layerName))
            {
                setupLog.Add($"‚úì –°–ª–æ–π '{layerName}' —Å–æ–∑–¥–∞–Ω");
            }
            else
            {
                setupLog.Add($"‚ö† –°–ª–æ–π '{layerName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }
    }

    private bool CreateLayer(string layerName)
    {
        SerializedObject tagManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset")[0]);
        SerializedProperty layers = tagManager.FindProperty("layers");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ–π
        for (int i = 8; i < layers.arraySize; i++)
        {
            SerializedProperty layer = layers.GetArrayElementAtIndex(i);
            if (layer.stringValue == layerName)
            {
                return false; // –°–ª–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ–π
        for (int i = 8; i < layers.arraySize; i++)
        {
            SerializedProperty layer = layers.GetArrayElementAtIndex(i);
            if (string.IsNullOrEmpty(layer.stringValue))
            {
                layer.stringValue = layerName;
                tagManager.ApplyModifiedProperties();
                return true;
            }
        }

        return false;
    }

    private void SetupTags()
    {
        setupLog.Add("\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ ---");

        string[] tagsToAdd = { "Player", "Ladder", "Rope", "Diggable", "Enemy" };

        foreach (string tagName in tagsToAdd)
        {
            if (CreateTag(tagName))
            {
                setupLog.Add($"‚úì –¢–µ–≥ '{tagName}' —Å–æ–∑–¥–∞–Ω");
            }
            else
            {
                setupLog.Add($"‚ö† –¢–µ–≥ '{tagName}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            }
        }
    }

    private bool CreateTag(string tagName)
    {
        SerializedObject tagManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset")[0]);
        SerializedProperty tags = tagManager.FindProperty("tags");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–µ–≥
        for (int i = 0; i < tags.arraySize; i++)
        {
            SerializedProperty tag = tags.GetArrayElementAtIndex(i);
            if (tag.stringValue == tagName)
            {
                return false;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
        tags.InsertArrayElementAtIndex(tags.arraySize);
        SerializedProperty newTag = tags.GetArrayElementAtIndex(tags.arraySize - 1);
        newTag.stringValue = tagName;
        tagManager.ApplyModifiedProperties();

        return true;
    }

    private void SetupCollisionMatrix()
    {
        setupLog.Add("\n--- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ–ª–ª–∏–∑–∏–π ---");

        int groundLayer = LayerMask.NameToLayer("Ground");
        int ladderLayer = LayerMask.NameToLayer("Ladder");
        int ropeLayer = LayerMask.NameToLayer("Rope");
        int diggableLayer = LayerMask.NameToLayer("Diggable");

        if (groundLayer == -1 || ladderLayer == -1 || ropeLayer == -1 || diggableLayer == -1)
        {
            setupLog.Add("‚ùå –ù–µ –≤—Å–µ —Å–ª–æ–∏ —Å–æ–∑–¥–∞–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª–ª–∏–∑–∏–∏.");
            return;
        }

        // –õ–µ—Å—Ç–Ω–∏—Ü—ã –∏ –≤–µ—Ä–µ–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∏ —Å –∑–µ–º–ª–µ–π
        Physics2D.IgnoreLayerCollision(ladderLayer, groundLayer, true);
        Physics2D.IgnoreLayerCollision(ropeLayer, groundLayer, true);
        Physics2D.IgnoreLayerCollision(ladderLayer, ropeLayer, true);
        Physics2D.IgnoreLayerCollision(ladderLayer, diggableLayer, true);
        Physics2D.IgnoreLayerCollision(ropeLayer, diggableLayer, true);

        setupLog.Add("‚úì –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ–ª–ª–∏–∑–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:");
        setupLog.Add("  ‚Ä¢ Ladder –Ω–µ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å Ground, Rope, Diggable");
        setupLog.Add("  ‚Ä¢ Rope –Ω–µ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è —Å Ground, Ladder, Diggable");
    }

    [MenuItem("Tools/Lode Runner/–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")]
    public static void CheckSetup()
    {
        bool hasIssues = false;
        string report = "=== –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ï–ö–¢–ê ===\n\n";

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–µ–≤
        report += "–°–õ–û–ò:\n";
        string[] requiredLayers = { "Ground", "Ladder", "Rope", "Diggable" };
        foreach (string layerName in requiredLayers)
        {
            int layer = LayerMask.NameToLayer(layerName);
            if (layer == -1)
            {
                report += $"‚ùå –°–ª–æ–π '{layerName}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
                hasIssues = true;
            }
            else
            {
                report += $"‚úì –°–ª–æ–π '{layerName}' –Ω–∞–π–¥–µ–Ω (–∏–Ω–¥–µ–∫—Å {layer})\n";
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–æ–≤
        report += "\n–¢–ï–ì–ò:\n";
        string[] requiredTags = { "Player", "Ladder", "Rope", "Diggable" };
        foreach (string tagName in requiredTags)
        {
            try
            {
                GameObject.FindGameObjectWithTag(tagName);
                report += $"‚úì –¢–µ–≥ '{tagName}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n";
            }
            catch
            {
                report += $"‚ùå –¢–µ–≥ '{tagName}' –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
                hasIssues = true;
            }
        }

        if (hasIssues)
        {
            report += "\n‚ö† –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´! –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'Tools ‚Üí Lode Runner ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞'";
            Debug.LogWarning(report);
            EditorUtility.DisplayDialog("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", report, "OK");
        }
        else
        {
            report += "\n‚úì –í–°–ï –ù–ê–°–¢–†–û–ô–ö–ò –í –ü–û–†–Ø–î–ö–ï!";
            Debug.Log(report);
            EditorUtility.DisplayDialog("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", report, "OK");
        }
    }
}

