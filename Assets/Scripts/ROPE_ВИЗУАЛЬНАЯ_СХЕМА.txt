═══════════════════════════════════════════════════════════════
    🎮 ROPE SYSTEM - ВИЗУАЛЬНАЯ СХЕМА РАБОТЫ
═══════════════════════════════════════════════════════════════


📐 ЗОНЫ ДЕТЕКТИРОВАНИЯ ИГРОКА:

                      ╔════════════════╗
                      ║   ВЕРЕВКА     ║  ← Rope Layer (Layer 8)
     ═══════════════════════════════════  ← ropeCenterY (высота висения)
                      ╚════════════════╝


                      ┌──────────────┐
                      │   🔵 Rope    │  ← Зона проверки веревки
                      │   Check      │     (0.6f x 0.4f)
                  ════╪════ +0.3f ═══╪════ ← transform.position.y + 0.3f
                      │              │
                      │   👤 Player  │  ← Центр игрока
                  ════╪══════════════╪════ ← transform.position.y
                      │              │
                      │   🔵 Ladder  │  ← Зона проверки лестницы
                      │   Check      │     (0.5f x 1f)
                      │              │
                      └──────────────┘
                      ┌──────────────┐
                      │    Ground    │  ← groundCheck (внизу)
                      └──────────────┘


═══════════════════════════════════════════════════════════════


🎯 СОСТОЯНИЯ ИГРОКА И ПЕРЕХОДЫ:


     ┌─────────────┐
     │   WALKING   │ ← На земле
     └──────┬──────┘
            │
            │ [Нажата ↑ под веревкой]
            │ verticalInput > 0.1f && isOnRope && isGrounded
            ↓
     ┌─────────────┐
     │   ON ROPE   │ ← Захват веревки
     │ (подпрыгнул)│   (импульс вверх 2f)
     └──────┬──────┘
            │
            │ [Гравитация = 0]
            │ [Центрирование к ropeCenterY]
            ↓
     ┌─────────────┐
     │   ON ROPE   │ ← Висит на веревке
     │  (висит)    │   Движение ← →
     └──────┬──────┘
            │
            │ [Нажата ↓]
            │ verticalInput < -0.1f
            ↓
     ┌─────────────┐
     │   FALLING   │ ← Падение
     │             │   (гравитация = 3)
     └─────────────┘


     ┌─────────────┐
     │   FALLING   │ ← Падение в яму
     └──────┬──────┘
            │
            │ [Проходит через веревку]
            │ isOnRope && !isGrounded
            ↓
     ┌─────────────┐
     │   ON ROPE   │ ← Автозахват в воздухе
     │ (схватился) │   (гравитация = 0)
     └──────┬──────┘
            │
            ↓
     [Продолжает висеть и двигаться]


═══════════════════════════════════════════════════════════════


📊 БЛОК-СХЕМА HandleState() - ЛОГИКА СОСТОЯНИЙ:


   START
     │
     ├─→ [Копает?] ──YES──→ RETURN (не переключаемся)
     │      │
     │     NO
     │      │
     ├─→ [На лестнице?] ──YES──→ [Нажата ↑/↓?] ──YES──→ CLIMBING
     │      │                            │
     │     NO                           NO
     │      │                            │
     │      │                           [Стоим на лестнице]
     │      │
     ├─→ [На веревке && В воздухе?] ──YES──→ ON ROPE (автозахват)
     │      │
     │     NO
     │      │
     ├─→ [На веревке && На земле && Нажата ↑?] ──YES──→ ON ROPE (прыжок)
     │      │
     │     NO
     │      │
     ├─→ [На земле?] ──YES──→ WALKING
     │      │
     │     NO
     │      │
     └─→ FALLING


═══════════════════════════════════════════════════════════════


⚙️ БЛОК-СХЕМА ApplyMovement() - ФИЗИКА ДВИЖЕНИЯ:


   [Состояние: ON ROPE]
          │
          ├─→ velocity.x = horizontalInput * ropeSpeed
          │
          ├─→ [centerOnRope?] ──YES──┐
          │         │                 │
          │        NO                 │
          │         │                 ↓
          │         │          [Вычисляем targetY = ropeCenterY]
          │         │                 │
          │         │          [Расстояние > 0.05f?]
          │         │                 │
          │         │           YES ──┼──→ Плавное движение к targetY
          │         │                 │    (MoveTowards с ropeCenterSpeed)
          │         │                NO
          │         │                 │
          │         ↓                 ↓
          │     velocity.y = 0f  (фиксируем)
          │
          ├─→ [canClimbRope && ↑?] ──YES──→ velocity.y = verticalInput * ropeClimbSpeed
          │         │
          │        NO
          │         │
          └─→ [Нажата ↓?] ──YES──→ velocity.y = -2f
                    │               currentState = FALLING
                   NO               gravityScale = 3f
                    │
                    ↓
               [Остаемся на веревке]


═══════════════════════════════════════════════════════════════


🎨 ВИЗУАЛИЗАЦИЯ GIZMOS:


   Выделите Player в Hierarchy, чтобы увидеть:

                 ╔════════════════╗
                 ║    ВЕРЕВКА    ║
    ═══════════════════════════════════
                 ╚════════════════╝
                       │ 
                       │ 🟡 ← Желтая сфера (целевая высота)
                       │ │
                       │ │  📏 Линия (направление центрирования)
                       ↓ ↓
                 ┌──────────────┐
                 │  🟢 ЗЕЛЕНЫЙ  │ ← Зона проверки веревки
                 │     КУБ      │   (активна, когда isOnRope)
    ═════════════╪══════════════╪═════
                 │              │
                 │   👤 PLAYER  │
                 │              │
                 │  🔵 СИНИЙ    │ ← Зона проверки лестницы
                 │     КУБ      │
                 └──────────────┘
                       🔴 ← Красный круг (groundCheck)


   Цвета:
   🟢 ЗЕЛЕНЫЙ → Веревка обнаружена (isOnRope = true)
   🔵 ГОЛУБОЙ → Нет веревки (isOnRope = false)
   🟡 ЖЕЛТЫЙ  → Целевая высота висения
   📏 ЛИНИЯ   → Показывает направление центрирования


═══════════════════════════════════════════════════════════════


🔢 КЛЮЧЕВЫЕ ПАРАМЕТРЫ И ИХ ВЛИЯНИЕ:


   ┌──────────────────────┬────────────────────────────────────┐
   │ ПАРАМЕТР             │ ВЛИЯНИЕ                            │
   ├──────────────────────┼────────────────────────────────────┤
   │ ropeSpeed (4f)       │ Скорость движения влево/вправо     │
   │                      │ Больше = быстрее движение          │
   ├──────────────────────┼────────────────────────────────────┤
   │ centerOnRope (true)  │ Включает автоцентрирование         │
   │                      │ false = игрок висит где схватился  │
   ├──────────────────────┼────────────────────────────────────┤
   │ ropeCenterSpeed (8f) │ Скорость выравнивания по высоте    │
   │                      │ Больше = быстрее центрируется      │
   ├──────────────────────┼────────────────────────────────────┤
   │ canClimbRope (false) │ Можно ли лазать вверх              │
   │                      │ true = можно подниматься по ↑      │
   ├──────────────────────┼────────────────────────────────────┤
   │ ropeClimbSpeed (2f)  │ Скорость лазания вверх             │
   │                      │ Работает только если canClimbRope  │
   ├──────────────────────┼────────────────────────────────────┤
   │ Зона проверки:       │ Область где игрок ищет веревку     │
   │ (0.6f x 0.4f)        │ Больше = легче схватиться          │
   │ +0.3f по Y           │ Смещение вверх (область рук)       │
   ├──────────────────────┼────────────────────────────────────┤
   │ Импульс захвата:     │ Сила подпрыгивания к веревке       │
   │ velocity.y = 2f      │ Больше = выше прыжок               │
   └──────────────────────┴────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


💻 КОД - ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:


   ╔═══════════════════════════════════════════════════════════╗
   ║  1. ПРОВЕРКА ВЕРЕВКИ (CheckEnvironment)                  ║
   ╚═══════════════════════════════════════════════════════════╝

   // Проверяем область РУК игрока (не центр!)
   Vector2 ropeCheckPos = new Vector2(
       transform.position.x, 
       transform.position.y + 0.3f  // Смещение вверх
   );

   Collider2D ropeCollider = Physics2D.OverlapBox(
       ropeCheckPos,               // Позиция проверки
       new Vector2(0.6f, 0.4f),   // Размер зоны
       0f,                         // Поворот
       ropeLayer                   // Слой "Rope"
   );

   if (ropeCollider != null)
   {
       isOnRope = true;
       currentRope = ropeCollider;
       // Запоминаем высоту для висения
       ropeCenterY = ropeCollider.bounds.min.y;
   }


   ╔═══════════════════════════════════════════════════════════╗
   ║  2. ЗАХВАТ С ЗЕМЛИ (HandleState)                         ║
   ╚═══════════════════════════════════════════════════════════╝

   // Если на земле и над головой веревка - подпрыгиваем
   else if (isOnRope && isGrounded && verticalInput > 0.1f)
   {
       currentState = PlayerState.OnRope;
       rb.gravityScale = 0f;  // Отключаем гравитацию
       
       // Импульс вверх для захвата
       rb.linearVelocity = new Vector2(
           rb.linearVelocity.x, 
           2f  // Сила прыжка
       );
   }


   ╔═══════════════════════════════════════════════════════════╗
   ║  3. ЦЕНТРИРОВАНИЕ НА ВЕРЕВКЕ (ApplyMovement)             ║
   ╚═══════════════════════════════════════════════════════════╝

   if (centerOnRope && currentRope != null)
   {
       float currentY = transform.position.y;
       float targetY = ropeCenterY;  // Высота веревки
       
       // Плавно двигаемся к целевой высоте
       if (Mathf.Abs(currentY - targetY) > 0.05f)
       {
           float newY = Mathf.MoveTowards(
               currentY,                      // Текущая позиция
               targetY,                       // Целевая позиция
               ropeCenterSpeed * Time.fixedDeltaTime  // Скорость
           );
           
           transform.position = new Vector3(
               transform.position.x, 
               newY, 
               transform.position.z
           );
           
           velocity.y = 0f;
       }
   }


   ╔═══════════════════════════════════════════════════════════╗
   ║  4. СПРЫГИВАНИЕ ВНИЗ (ApplyMovement)                     ║
   ╚═══════════════════════════════════════════════════════════╝

   // Проверяем нажатие ↓
   if (verticalInput < -0.1f)
   {
       velocity.y = -2f;                  // Импульс вниз
       currentState = PlayerState.Falling; // Переход в падение
       rb.gravityScale = 3f;              // Включаем гравитацию
   }


═══════════════════════════════════════════════════════════════


🎓 ПРОДВИНУТЫЕ ТЕХНИКИ:


   ┌─────────────────────────────────────────────────────────┐
   │  ТЕХНИКА 1: Быстрый переход между веревками             │
   ├─────────────────────────────────────────────────────────┤
   │  1. Висим на Веревке А                                  │
   │  2. Нажимаем ↓ чтобы спрыгнуть                         │
   │  3. Сразу после падения проходим через Веревку Б        │
   │  4. Автоматически хватаемся за Веревку Б                │
   │                                                         │
   │  Код:                                                   │
   │  if (isOnRope && !isGrounded)  // В воздухе            │
   │      currentState = PlayerState.OnRope; // Автозахват  │
   └─────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────┐
   │  ТЕХНИКА 2: Подъем с земли к высокой веревке            │
   ├─────────────────────────────────────────────────────────┤
   │  1. Стоим под веревкой                                  │
   │  2. Зажимаем ↑                                          │
   │  3. Игрок подпрыгивает (velocity.y = 2f)               │
   │  4. Автоматически хватается за веревку                  │
   │                                                         │
   │  Код:                                                   │
   │  if (isOnRope && isGrounded && verticalInput > 0.1f)   │
   │      rb.linearVelocity = new Vector2(..., 2f);         │
   └─────────────────────────────────────────────────────────┘

   ┌─────────────────────────────────────────────────────────┐
   │  ТЕХНИКА 3: Точное позиционирование                     │
   ├─────────────────────────────────────────────────────────┤
   │  • centerOnRope = true выравнивает высоту               │
   │  • ropeCenterSpeed = 8 делает это быстро                │
   │  • Игрок всегда на одной высоте = предсказуемо          │
   │                                                         │
   │  Можно отключить:                                       │
   │  centerOnRope = false → свободное висение               │
   └─────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


🧪 ТЕСТИРОВАНИЕ:


   ТЕСТ 1: Автозахват в воздухе
   ✓ Прыгните с платформы
   ✓ Пролетите через веревку
   ✓ Ожидание: Автоматический захват

   ТЕСТ 2: Захват с земли
   ✓ Встаньте под веревкой
   ✓ Нажмите ↑
   ✓ Ожидание: Подпрыгивание и захват

   ТЕСТ 3: Движение по веревке
   ✓ Захватитесь за веревку
   ✓ Нажмите ← или →
   ✓ Ожидание: Плавное движение

   ТЕСТ 4: Спрыгивание
   ✓ Висите на веревке
   ✓ Нажмите ↓
   ✓ Ожидание: Падение вниз

   ТЕСТ 5: Центрирование
   ✓ Захватитесь за веревку
   ✓ Наблюдайте за Gizmos
   ✓ Ожидание: Плавное выравнивание к желтой сфере


═══════════════════════════════════════════════════════════════


✅ ГОТОВО! СИСТЕМА ВЕРЕВОК НАСТРОЕНА!

Теперь вы можете:
• Создавать уровни с веревками
• Использовать веревки для навигации
• Комбинировать веревки, лестницы и платформы
• Создавать интересные паззлы и челленджи

Удачи в разработке! 🚀

