═══════════════════════════════════════════════════════════════
  ПРИМЕРЫ ВЫРАВНИВАНИЯ ОБЪЕКТОВ
═══════════════════════════════════════════════════════════════

📐 КАК РАБОТАЕТ ВЫРАВНИВАНИЕ:

X и Y выравниваются к значениям: 0.5, 1.5, 2.5, 3.5, 4.5 и т.д.
(то есть всегда целое число + 0.5)

═══════════════════════════════════════════════════════════════

✅ ПРИМЕРЫ ДЛЯ ОСИ X:

Текущая позиция X  →  Выровненная позиция X
─────────────────────────────────────────────
   0.0             →        0.5
   0.2             →        0.5
   0.4             →        0.5
   0.6             →        0.5
   0.8             →        0.5
   0.9             →        1.5
   1.0             →        1.5
   1.2             →        1.5
   1.4             →        1.5
   1.6             →        1.5
   1.8             →        2.5
   2.0             →        2.5
   2.3             →        2.5
   2.7             →        2.5
   2.9             →        3.5
   3.1             →        3.5

═══════════════════════════════════════════════════════════════

✅ ПРИМЕРЫ ДЛЯ ОСИ Y:

Текущая позиция Y  →  Выровненная позиция Y
─────────────────────────────────────────────
   0.0             →        0.5
   0.5             →        0.5
   0.7             →        0.5
   0.9             →        1.5
   1.0             →        1.5
   1.3             →        1.5
   1.8             →        2.5
   2.0             →        2.5
   2.4             →        2.5
   2.6             →        2.5
   2.9             →        3.5
   3.2             →        3.5

═══════════════════════════════════════════════════════════════

📊 ВИЗУАЛЬНАЯ СЕТКА:

   Y
   │
 5.5├─────────────────────────────────
   │         ●         ●         ●
 4.5├─────────●─────────●─────────●───
   │         ●         ●         ●
 3.5├─────────●─────────●─────────●───
   │         ●         ●         ●
 2.5├─────────●─────────●─────────●───
   │         ●         ●         ●
 1.5├─────────●─────────●─────────●───
   │         ●         ●         ●
 0.5├─────────●─────────●─────────●───
   │
 0.0└─────────┴─────────┴─────────┴───→ X
   0.0       0.5       1.5       2.5

   ● = Точки выравнивания

═══════════════════════════════════════════════════════════════

🎯 ПРАКТИЧЕСКИЙ ПРИМЕР:

Вы расставили пропсы примерно:
   - Куб 1: позиция (0.8, 1.3, 0.0)
   - Куб 2: позиция (1.7, 2.1, 0.0)
   - Куб 3: позиция (2.3, 0.6, 0.0)

После нажатия кнопки "ВЫРОВНЯТЬ ПО СЕТКЕ":
   - Куб 1: позиция (0.5, 1.5, 0.0) ✓
   - Куб 2: позиция (1.5, 2.5, 0.0) ✓
   - Куб 3: позиция (2.5, 0.5, 0.0) ✓

Все объекты идеально выровнены по сетке!

═══════════════════════════════════════════════════════════════

💡 ПОЧЕМУ ИМЕННО ТАК?

Выравнивание к значениям N + 0.5 полезно для:
  • Центрирования объектов размером 1x1 на целочисленной сетке
  • Избежания "прилипания" к целым координатам 0, 1, 2, 3...
  • Создания равномерных промежутков между объектами
  • Совместимости с тайловыми системами

Формула: Round(значение - 0.5) + 0.5

═══════════════════════════════════════════════════════════════

🔧 НАСТРОЙКА ПОД ДРУГИЕ НУЖДЫ:

Если вам нужно другое выравнивание, измените код в SnapToGrid():

Для выравнивания к целым числам (0, 1, 2, 3...):
   snappedPosition.x = Mathf.Round(currentPosition.x);

Для выравнивания кратно 0.25 (0, 0.25, 0.5, 0.75, 1.0...):
   snappedPosition.x = Mathf.Round(currentPosition.x * 4f) / 4f;

Для выравнивания кратно 2 (0, 2, 4, 6, 8...):
   snappedPosition.x = Mathf.Round(currentPosition.x / 2f) * 2f;

═══════════════════════════════════════════════════════════════

