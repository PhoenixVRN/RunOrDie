using UnityEngine;
using UnityEngine.Events;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–≥—Ä—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–º, –∑–æ–ª–æ—Ç–æ–º, –∫–ª—é—á–∞–º–∏, —É—Ä–æ–≤–Ω—è–º–∏
/// </summary>
public class GameManager : MonoBehaviour
{
    [Header("–°—á–µ—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å")]
    [SerializeField] private int currentScore = 0;
    [SerializeField] private int goldCollected = 0;
    [SerializeField] private int totalGoldInLevel = 0;
    [SerializeField] private bool hasKey = false;
    
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Ä–æ–≤–Ω—è")]
    [SerializeField] private bool requireAllGold = true; // –ù—É–∂–Ω–æ –ª–∏ —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∑–æ–ª–æ—Ç–æ –¥–ª—è –≤—ã—Ö–æ–¥–∞
    [SerializeField] private bool requireKey = true;     // –ù—É–∂–µ–Ω –ª–∏ –∫–ª—é—á –¥–ª—è –≤—ã—Ö–æ–¥–∞
    
    [Header("UI –°–æ–±—ã—Ç–∏—è")]
    public UnityEvent<int> OnScoreChanged;
    public UnityEvent<int, int> OnGoldChanged; // (—Å–æ–±—Ä–∞–Ω–æ, –≤—Å–µ–≥–æ)
    public UnityEvent OnKeyCollected;
    public UnityEvent OnLevelComplete;
    
    private static GameManager instance;
    
    public static GameManager Instance
    {
        get
        {
            if (instance == null)
            {
                instance = FindFirstObjectByType<GameManager>();
            }
            return instance;
        }
    }

    private void Awake()
    {
        // Singleton pattern
        if (instance != null && instance != this)
        {
            Destroy(gameObject);
            return;
        }
        instance = this;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤ —É—Ä–æ–≤–Ω–µ
        CountTotalGold();
    }

    private void Start()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        UpdateUI();
    }

    /// <summary>
    /// –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–æ–ª–æ—Ç–∞ –≤ —É—Ä–æ–≤–Ω–µ
    /// </summary>
    private void CountTotalGold()
    {
        Collectible[] collectibles = FindObjectsByType<Collectible>(FindObjectsSortMode.None);
        totalGoldInLevel = 0;
        
        foreach (Collectible collectible in collectibles)
        {
            if (collectible.GetCollectibleType() == Collectible.CollectibleType.Gold)
            {
                totalGoldInLevel++;
            }
        }
        
        Debug.Log($"–í—Å–µ–≥–æ –∑–æ–ª–æ—Ç–∞ –≤ —É—Ä–æ–≤–Ω–µ: {totalGoldInLevel}");
    }

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏
    /// </summary>
    public void AddScore(int points)
    {
        currentScore += points;
        OnScoreChanged?.Invoke(currentScore);
        Debug.Log($"–°—á–µ—Ç: {currentScore}");
    }

    /// <summary>
    /// –°–æ–±—Ä–∞–Ω–æ –∑–æ–ª–æ—Ç–æ
    /// </summary>
    public void CollectGold()
    {
        goldCollected++;
        OnGoldChanged?.Invoke(goldCollected, totalGoldInLevel);
        
        Debug.Log($"–ó–æ–ª–æ—Ç–æ: {goldCollected}/{totalGoldInLevel}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–Ω–æ –ª–∏ –≤—Å–µ –∑–æ–ª–æ—Ç–æ
        if (goldCollected >= totalGoldInLevel)
        {
            Debug.Log("‚úÖ –í—Å–µ –∑–æ–ª–æ—Ç–æ —Å–æ–±—Ä–∞–Ω–æ!");
            CheckLevelComplete();
        }
    }

    /// <summary>
    /// –°–æ–±—Ä–∞–Ω –∫–ª—é—á
    /// </summary>
    public void CollectKey()
    {
        hasKey = true;
        OnKeyCollected?.Invoke();
        
        Debug.Log("üîë –ö–ª—é—á –ø–æ–ª—É—á–µ–Ω!");
        CheckLevelComplete();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
    /// </summary>
    public bool CanCompleteLevel()
    {
        bool goldCondition = !requireAllGold || (goldCollected >= totalGoldInLevel);
        bool keyCondition = !requireKey || hasKey;
        
        return goldCondition && keyCondition;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    /// </summary>
    private void CheckLevelComplete()
    {
        if (CanCompleteLevel())
        {
            Debug.Log("‚ú® –£—Ä–æ–≤–µ–Ω—å –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å! –ò–¥–∏—Ç–µ –∫ –≤—ã—Ö–æ–¥—É!");
        }
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
    /// </summary>
    public void CompleteLevel()
    {
        if (!CanCompleteLevel())
        {
            Debug.LogWarning("–£—Ä–æ–≤–µ–Ω—å –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å! –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ!");
            return;
        }
        
        Debug.Log("üéâ –£–†–û–í–ï–ù–¨ –ó–ê–í–ï–†–®–ï–ù!");
        OnLevelComplete?.Invoke();
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        // SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    /// </summary>
    private void UpdateUI()
    {
        OnScoreChanged?.Invoke(currentScore);
        OnGoldChanged?.Invoke(goldCollected, totalGoldInLevel);
    }

    /// <summary>
    /// –°–±—Ä–æ—Å —É—Ä–æ–≤–Ω—è
    /// </summary>
    public void ResetLevel()
    {
        currentScore = 0;
        goldCollected = 0;
        hasKey = false;
        CountTotalGold();
        UpdateUI();
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public int GetScore() => currentScore;
    public int GetGoldCollected() => goldCollected;
    public int GetTotalGold() => totalGoldInLevel;
    public bool HasKey() => hasKey;

    // –û—Ç–ª–∞–¥–∫–∞
    private void OnGUI()
    {
        if (Debug.isDebugBuild)
        {
            GUI.Label(new Rect(10, 90, 300, 20), $"Score: {currentScore}");
            GUI.Label(new Rect(10, 110, 300, 20), $"Gold: {goldCollected}/{totalGoldInLevel}");
            GUI.Label(new Rect(10, 130, 300, 20), $"Key: {(hasKey ? "‚úì" : "‚úó")}");
            GUI.Label(new Rect(10, 150, 300, 20), $"Can Exit: {(CanCompleteLevel() ? "‚úì" : "‚úó")}");
        }
    }
}

