using UnityEngine;

/// <summary>
/// –í—ã—Ö–æ–¥ –∏–∑ —É—Ä–æ–≤–Ω—è - –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –¥–æ–π—Ç–∏ —Å—é–¥–∞ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
/// </summary>
public class LevelExit : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")] [SerializeField] private bool isActive = true;

    [Header("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")]
    [Tooltip("–°–ø—Ä–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–≤–µ—Ä–∏ (–¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤—ã—Ö–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")]
    [SerializeField]
    private GameObject openDoorSprite;

    [SerializeField] private bool enablePulseAnimation = true;
    [SerializeField] private float pulseSpeed = 2f;

    [Header("–ó–≤—É–∫")] [SerializeField] private AudioClip exitSound;
    [SerializeField] private AudioClip lockedSound;

    private GameManager gameManager;
    private Vector3 originalScale;
    private bool playerInTrigger = false;

    private void Awake()
    {
        originalScale = transform.localScale;
    }

    private void Start()
    {
        gameManager = GameManager.Instance;
        UpdateVisuals();
    }

    private void Update()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏–π
        UpdateVisuals();

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
        if (enablePulseAnimation && CanExit())
        {
            float pulse = 1f + Mathf.Sin(Time.time * pulseSpeed) * 0.1f;
            transform.localScale = originalScale * pulse;
        }
        else
        {
            transform.localScale = originalScale;
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    private void UpdateVisuals()
    {
        if (openDoorSprite == null) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–≤–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã—Ö–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        bool canExit = CanExit();
        if (canExit)
        {
            openDoorSprite.SetActive(false);
        }
        else
        {
            openDoorSprite.SetActive(true);
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —É—Ä–æ–≤–Ω—è
    /// </summary>
    private bool CanExit()
    {
        if (!isActive) return false;
        if (gameManager == null) return false;

        return gameManager.CanCompleteLevel();
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        PlayerController player = collision.GetComponent<PlayerController>();
        if (player != null)
        {
            playerInTrigger = true;
            TryExit();
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        PlayerController player = collision.GetComponent<PlayerController>();
        if (player != null)
        {
            playerInTrigger = false;
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–π—Ç–∏ –∏–∑ —É—Ä–æ–≤–Ω—è
    /// </summary>
    private void TryExit()
    {
        if (!playerInTrigger) return;

        if (CanExit())
        {
            // –í—ã—Ö–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∑–∞–≤–µ—Ä—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            Debug.Log("üéâ –ò–≥—Ä–æ–∫ –≤–æ—à–µ–ª –≤ –≤—ã—Ö–æ–¥! –£—Ä–æ–≤–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω!");

            if (exitSound != null)
            {
                AudioSource.PlayClipAtPoint(exitSound, transform.position);
            }

            if (gameManager != null)
            {
                gameManager.CompleteLevel();
            }
        }
        else
        {
            // –í—ã—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            string message = GetBlockedMessage();
            Debug.LogWarning($"‚ö†Ô∏è –í—ã—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! {message}");

            if (lockedSound != null)
            {
                AudioSource.PlayClipAtPoint(lockedSound, transform.position);
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥
    /// </summary>
    private string GetBlockedMessage()
    {
        if (gameManager == null) return "GameManager –Ω–µ –Ω–∞–π–¥–µ–Ω!";

        int goldCollected = gameManager.GetGoldCollected();
        int totalGold = gameManager.GetTotalGold();
        bool hasKey = gameManager.HasKey();

        if (goldCollected < totalGold && !hasKey)
        {
            return $"–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∑–æ–ª–æ—Ç–æ ({goldCollected}/{totalGold}) –∏ –Ω–∞–π–¥–∏—Ç–µ –∫–ª—é—á!";
        }
        else if (goldCollected < totalGold)
        {
            return $"–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∑–æ–ª–æ—Ç–æ! ({goldCollected}/{totalGold})";
        }
        else if (!hasKey)
        {
            return "–ù–∞–π–¥–∏—Ç–µ –∫–ª—é—á!";
        }

        return "–£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã";
    }

    /// <summary>
    /// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    /// </summary>
    private void OnDrawGizmos()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireCube(transform.position, new Vector3(1f, 1f, 0f));

#if UNITY_EDITOR
        UnityEditor.Handles.Label(transform.position + Vector3.up * 0.7f, "EXIT");
#endif
    }
}