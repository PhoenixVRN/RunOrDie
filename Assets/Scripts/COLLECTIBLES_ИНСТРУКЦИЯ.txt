═══════════════════════════════════════════════════════════════
  🏆 СИСТЕМА СБОРА ПРЕДМЕТОВ - ПОЛНАЯ ИНСТРУКЦИЯ 🏆
═══════════════════════════════════════════════════════════════


📋 БЫСТРАЯ НАСТРОЙКА (3 ШАГА):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1️⃣ СОЗДАТЬ GAMEMANAGER
   • Unity → Lode Runner → Настройка системы сбора предметов
   • Нажать "Создать GameManager"

2️⃣ СОЗДАТЬ ПРЕФАБЫ
   • Нажать "Создать префаб Gold (Золото)"
   • Нажать "Создать префаб Key (Ключ)"
   • Нажать "Создать префаб Exit (Выход)"

3️⃣ РАЗМЕСТИТЬ В УРОВНЕ
   • Перетащите Gold префабы в разные места
   • Добавьте 1 Key (опционально)
   • Разместите Exit в конце уровня

✅ ГОТОВО! Запустите игру и соберите всё!


═══════════════════════════════════════════════════════════════


🎮 КОМПОНЕНТЫ СИСТЕМЫ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ 1. GameManager (Assets/Scripts/GameManager.cs)            │
├────────────────────────────────────────────────────────────┤
│ Управляет:                                                 │
│ • Счетом (очки)                                            │
│ • Собранным золотом                                        │
│ • Наличием ключа                                           │
│ • Условиями завершения уровня                              │
│                                                            │
│ Должен быть: 1 в сцене (Singleton)                        │
└────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────┐
│ 2. Collectible (Assets/Scripts/Level/Collectible.cs)      │
├────────────────────────────────────────────────────────────┤
│ Базовый класс для предметов:                               │
│ • 🪙 Gold - золото (очки)                                  │
│ • 🔑 Key - ключ (разблокирует выход)                       │
│ • 🎁 Bonus - бонус (дополнительные очки)                   │
│                                                            │
│ Функции:                                                   │
│ • Автоматическое подбирание при касании                    │
│ • Анимация пульсации                                       │
│ • Эффект сбора (уменьшение + движение вверх)               │
│ • Звуковой эффект (опционально)                            │
└────────────────────────────────────────────────────────────┘


┌────────────────────────────────────────────────────────────┐
│ 3. LevelExit (Assets/Scripts/Level/LevelExit.cs)          │
├────────────────────────────────────────────────────────────┤
│ Выход из уровня:                                           │
│ • Проверяет условия завершения                             │
│ • Меняет цвет (красный → зеленый)                         │
│ • Завершает уровень при входе игрока                       │
│                                                            │
│ Условия выхода (настраиваемые):                            │
│ • Собрано все золото                                       │
│ • Получен ключ                                             │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


⚙️ НАСТРОЙКА GAMEMANAGER:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПАРАМЕТРЫ В INSPECTOR                                      │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ [Счет и прогресс]                                          │
│ Current Score ............ 0 (текущий счет, read-only)    │
│ Gold Collected ........... 0 (собрано золота, read-only)  │
│ Total Gold In Level ...... 0 (всего в уровне, auto)       │
│ Has Key .................. ✗ (есть ключ, read-only)       │
│                                                            │
│ [Настройки уровня]                                         │
│ Require All Gold ......... ✓ (нужно ли все золото)        │
│ Require Key .............. ✓ (нужен ли ключ)              │
│                                                            │
│ [UI События]                                               │
│ On Score Changed ......... UnityEvent (очки изменились)   │
│ On Gold Changed .......... UnityEvent (золото изменилось) │
│ On Key Collected ......... UnityEvent (ключ собран)       │
│ On Level Complete ........ UnityEvent (уровень завершен)  │
│                                                            │
└────────────────────────────────────────────────────────────┘


ПРИМЕРЫ НАСТРОЕК:

Вариант 1: Классический Lode Runner
  ✓ Require All Gold = true
  ✓ Require Key = true
  → Нужно собрать ВСЁ золото И найти ключ

Вариант 2: Упрощенный режим
  ✓ Require All Gold = false
  ✗ Require Key = false
  → Можно выйти в любой момент

Вариант 3: Только золото
  ✓ Require All Gold = true
  ✗ Require Key = false
  → Нужно только золото, ключ не обязателен


═══════════════════════════════════════════════════════════════


🪙 НАСТРОЙКА ЗОЛОТА (GOLD):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПАРАМЕТРЫ COLLECTIBLE (TYPE = GOLD)                        │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ [Настройки предмета]                                       │
│ Type .................... Gold                             │
│ Score Value ............. 100 (очки за подбор)             │
│                                                            │
│ [Визуальные эффекты]                                       │
│ Enable Pulse Animation .. ✓ (анимация пульсации)          │
│ Pulse Speed ............. 2 (скорость пульсации)           │
│ Pulse Scale ............. 1.2 (амплитуда пульсации)        │
│                                                            │
│ [Звук]                                                     │
│ Collect Sound ........... AudioClip (звук подбора)         │
│                                                            │
│ [События]                                                  │
│ On Collected ............ UnityEvent (при подборе)         │
│                                                            │
└────────────────────────────────────────────────────────────┘

КОМПОНЕНТЫ:
  ✅ SpriteRenderer - для отображения
  ✅ CircleCollider2D - isTrigger = true, radius = 0.3
  ✅ Collectible - скрипт


═══════════════════════════════════════════════════════════════


🔑 НАСТРОЙКА КЛЮЧА (KEY):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПАРАМЕТРЫ COLLECTIBLE (TYPE = KEY)                         │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ [Настройки предмета]                                       │
│ Type .................... Key                              │
│ Score Value ............. 0 (обычно ключ не дает очки)     │
│                                                            │
│ [Визуальные эффекты]                                       │
│ Enable Pulse Animation .. ✓ (анимация пульсации)          │
│ Pulse Speed ............. 2 (скорость пульсации)           │
│ Pulse Scale ............. 1.2 (амплитуда пульсации)        │
│                                                            │
└────────────────────────────────────────────────────────────┘

⚠️ ВАЖНО: На уровень обычно нужен ОДИН ключ!


═══════════════════════════════════════════════════════════════


🚪 НАСТРОЙКА ВЫХОДА (EXIT):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ПАРАМЕТРЫ LEVELEXIT                                        │
├────────────────────────────────────────────────────────────┤
│                                                            │
│ [Настройки]                                                │
│ Is Active ............... ✓ (активен ли выход)            │
│                                                            │
│ [Визуальные эффекты]                                       │
│ Sprite Renderer ......... SpriteRenderer компонент         │
│ Locked Color ............ Red (цвет когда заблокирован)    │
│ Unlocked Color .......... Green (цвет когда открыт)        │
│ Enable Pulse Animation .. ✓ (пульсация когда открыт)      │
│ Pulse Speed ............. 2 (скорость пульсации)           │
│                                                            │
│ [Звук]                                                     │
│ Exit Sound .............. AudioClip (успешный выход)       │
│ Locked Sound ............ AudioClip (выход заблокирован)   │
│                                                            │
└────────────────────────────────────────────────────────────┘

КОМПОНЕНТЫ:
  ✅ SpriteRenderer - для отображения
  ✅ BoxCollider2D - isTrigger = true, size = (1, 1)
  ✅ LevelExit - скрипт


═══════════════════════════════════════════════════════════════


🎮 КАК РАБОТАЕТ СИСТЕМА:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ПОСЛЕДОВАТЕЛЬНОСТЬ:

1️⃣ СТАРТ УРОВНЯ
   ↓
   GameManager подсчитывает золото в уровне
   └→ totalGoldInLevel = 5 (например)

2️⃣ ИГРОК СОБИРАЕТ ЗОЛОТО
   ↓
   Игрок касается золота (OnTriggerEnter2D)
   ↓
   Collectible вызывает GameManager.CollectGold()
   ↓
   goldCollected++ (1, 2, 3...)
   ↓
   GameManager.AddScore(100)
   ↓
   Анимация сбора (уменьшение + движение вверх)
   ↓
   Предмет уничтожается

3️⃣ ВСЁ ЗОЛОТО СОБРАНО
   ↓
   goldCollected == totalGoldInLevel
   ↓
   Debug: "✅ Все золото собрано!"

4️⃣ ИГРОК НАХОДИТ КЛЮЧ
   ↓
   Collectible вызывает GameManager.CollectKey()
   ↓
   hasKey = true
   ↓
   Debug: "🔑 Ключ получен!"

5️⃣ ВЫХОД РАЗБЛОКИРУЕТСЯ
   ↓
   LevelExit проверяет GameManager.CanCompleteLevel()
   ↓
   Условия выполнены:
     ✅ goldCollected >= totalGoldInLevel
     ✅ hasKey == true
   ↓
   Цвет выхода: Red → Green
   ↓
   Включается пульсация

6️⃣ ИГРОК ВХОДИТ В ВЫХОД
   ↓
   LevelExit.OnTriggerEnter2D(Player)
   ↓
   LevelExit.TryExit()
   ↓
   Проверка: CanCompleteLevel() == true?
   ↓
   ✅ ДА → GameManager.CompleteLevel()
   ↓
   Debug: "🎉 УРОВЕНЬ ЗАВЕРШЕН!"
   ↓
   OnLevelComplete event


═══════════════════════════════════════════════════════════════


🎨 ВИЗУАЛИЗАЦИЯ В СЦЕНЕ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

GIZMOS (выделите объект):

🟡 Желтый круг (radius 0.3) → Gold
🔵 Голубой круг (radius 0.3) → Key
🟢 Зеленый куб (1x1) → Exit


DEBUG GUI (в режиме игры):

┌───────────────────────┐
│ Score: 500            │
│ Gold: 5/5             │
│ Key: ✓                │
│ Can Exit: ✓           │
└───────────────────────┘


═══════════════════════════════════════════════════════════════


💻 КОД - ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

╔═══════════════════════════════════════════════════════════╗
║  ПОЛУЧЕНИЕ GAMEMANAGER                                    ║
╚═══════════════════════════════════════════════════════════╝

GameManager gm = GameManager.Instance;

if (gm != null)
{
    int score = gm.GetScore();
    int gold = gm.GetGoldCollected();
    bool hasKey = gm.HasKey();
    bool canExit = gm.CanCompleteLevel();
}


╔═══════════════════════════════════════════════════════════╗
║  ПОДПИСКА НА СОБЫТИЯ                                      ║
╚═══════════════════════════════════════════════════════════╝

void Start()
{
    GameManager gm = GameManager.Instance;
    
    // Подписка на изменение счета
    gm.OnScoreChanged.AddListener(OnScoreUpdate);
    
    // Подписка на сбор золота
    gm.OnGoldChanged.AddListener(OnGoldUpdate);
    
    // Подписка на сбор ключа
    gm.OnKeyCollected.AddListener(OnKeyCollected);
    
    // Подписка на завершение уровня
    gm.OnLevelComplete.AddListener(OnLevelComplete);
}

void OnScoreUpdate(int newScore)
{
    scoreText.text = $"Score: {newScore}";
}

void OnGoldUpdate(int collected, int total)
{
    goldText.text = $"Gold: {collected}/{total}";
}


╔═══════════════════════════════════════════════════════════╗
║  СОЗДАНИЕ GOLD ПРОГРАММНО                                 ║
╚═══════════════════════════════════════════════════════════╝

GameObject goldObject = new GameObject("Gold");
goldObject.transform.position = spawnPosition;

// Sprite Renderer
SpriteRenderer sr = goldObject.AddComponent<SpriteRenderer>();
sr.sprite = goldSprite;

// Collider
CircleCollider2D col = goldObject.AddComponent<CircleCollider2D>();
col.isTrigger = true;
col.radius = 0.3f;

// Collectible
Collectible collectible = goldObject.AddComponent<Collectible>();
// Настройка через SerializedObject (в Editor)
// Или через public методы


═══════════════════════════════════════════════════════════════


🎓 ПРИМЕРЫ ДИЗАЙНА УРОВНЕЙ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌───────────────────────────────────────────────────────────┐
│ ПРИМЕР 1: Простой уровень                                 │
└───────────────────────────────────────────────────────────┘

    🚪
    ██████████
         ║║
         ║║   🪙
    ██████████████
         🔑
    ██████████
         🪙  🪙
    ████████████████
    👤

Последовательность:
1. Собрать золото внизу
2. Подняться по лестнице
3. Собрать золото наверху
4. Спуститься за ключом
5. Подняться к выходу


┌───────────────────────────────────────────────────────────┐
│ ПРИМЕР 2: Сложный уровень                                 │
└───────────────────────────────────────────────────────────┘

    🚪
    ██████
         🪙═══════🪙
              ║║
    🪙═══════🔑
    ║║
    🪙        🪙
    ████████████████
    👤

Последовательность:
1. Собрать золото слева (лестница)
2. Собрать золото справа (веревка)
3. Собрать остальное золото
4. Получить ключ
5. Выход наверху


═══════════════════════════════════════════════════════════════


🐛 РЕШЕНИЕ ПРОБЛЕМ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌────────────────────────────────────────────────────────────┐
│ ❌ Золото не подбирается                                  │
├────────────────────────────────────────────────────────────┤
│ ✅ Проверьте CircleCollider2D:                            │
│    • Is Trigger = true                                     │
│    • Radius достаточный (0.3 рекомендуется)                │
│ ✅ Проверьте что у Player есть Rigidbody2D                 │
│ ✅ Проверьте что Collectible скрипт добавлен               │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ ❌ Выход не открывается                                   │
├────────────────────────────────────────────────────────────┤
│ ✅ Проверьте Debug GUI:                                    │
│    • Gold: 5/5 (все собрано?)                              │
│    • Key: ✓ (есть ключ?)                                  │
│    • Can Exit: ✓ (можно выйти?)                           │
│ ✅ Проверьте GameManager настройки:                        │
│    • Require All Gold                                      │
│    • Require Key                                           │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ ❌ GameManager не найден                                  │
├────────────────────────────────────────────────────────────┤
│ ✅ Убедитесь что GameManager в сцене                       │
│ ✅ Проверьте что компонент активен                         │
│ ✅ Запустите игру - GameManager работает в runtime         │
└────────────────────────────────────────────────────────────┘

┌────────────────────────────────────────────────────────────┐
│ ❌ Счет не обновляется                                    │
├────────────────────────────────────────────────────────────┤
│ ✅ Проверьте Score Value в Collectible                     │
│ ✅ Подпишитесь на OnScoreChanged event                     │
│ ✅ Проверьте Debug GUI для отладки                         │
└────────────────────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════


✅ ЧЕКЛИСТ НАСТРОЙКИ:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

☐ 1. GameManager создан и добавлен в сцену
☐ 2. GameManager настроен (Require All Gold, Require Key)
☐ 3. Префаб Gold создан
☐ 4. Префаб Key создан (если нужен)
☐ 5. Префаб Exit создан
☐ 6. Спрайты назначены для всех префабов
☐ 7. Gold размещены в уровне
☐ 8. Key размещен в уровне (если нужен)
☐ 9. Exit размещен в конце уровня
☐ 10. Протестировано:
     ☐ Золото подбирается
     ☐ Ключ подбирается
     ☐ Счет увеличивается
     ☐ Выход меняет цвет
     ☐ Уровень завершается


═══════════════════════════════════════════════════════════════


✨ СИСТЕМА ГОТОВА К ИСПОЛЬЗОВАНИЮ! ✨

Теперь ваша игра Lode Runner имеет полноценную систему сбора
предметов, подсчета очков и завершения уровней!

Удачи в разработке! 🚀

